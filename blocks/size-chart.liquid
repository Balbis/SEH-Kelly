{%- liquid
  assign size_chart_data = product.metafields.custom.size_chart_inches.value
-%}

{%- if size_chart_data and size_chart_data.size > 0 -%}
  <size-chart-component
    class="size-chart"
    {{ block.shopify_attributes }}
  >
    {%- if block.settings.title != blank -%}
      <h3 class="size-chart__title">{{ block.settings.title }}</h3>
    {%- endif -%}

    <div class="size-chart__tabs" style="display: none;">
      <button class="size-chart__tab size-chart__tab--active" data-unit="inches">IN</button>
      <button class="size-chart__tab" data-unit="cm">CM</button>
    </div>

    {%- liquid
      assign first_row = size_chart_data.first
      assign size_headers = ''
      assign all_possible_sizes = 'XS,S,M,L,XL,XXL,XXXL' | split: ','
      
      for size in all_possible_sizes
        if first_row[size] != blank
          assign size_headers = size_headers | append: size | append: ','
        endif
      endfor
      
      assign size_headers = size_headers | split: ','
    -%}

    <div class="size-chart__table-wrapper">
      <table class="size-chart__table" id="size-chart-table">
        <thead>
          <tr>
            <th scope="col"></th>
            {%- for header in size_headers -%}
              <th scope="col">{{ header }}</th>
            {%- endfor -%}
          </tr>
        </thead>
        <tbody>
          {%- for row in size_chart_data -%}
            <tr>
              <th scope="row">{{ row.Measurement | default: 'Measurement' }}</th>
              {%- for header in size_headers -%}
                {%- liquid
                  assign value = row[header] | default: '-'
                  assign fraction_value = value
                  assign cm_value = '-'
                  
                  if value != '-' and value != blank
                    assign value_str = value | append: ''
                    
                    if value_str contains '.'
                      assign parts = value_str | split: '.'
                      assign whole_part = parts[0]
                      assign decimal_part = parts[1]
                      
                      if decimal_part == '25'
                        assign fraction_value = whole_part | append: '¼'
                      elsif decimal_part == '5'
                        assign fraction_value = whole_part | append: '½'
                      elsif decimal_part == '75'
                        assign fraction_value = whole_part | append: '¾'
                      else
                        assign fraction_value = value
                      endif
                      
                      assign numeric_value = value | plus: 0
                      assign cm_numeric = numeric_value | times: 2.54
                      assign cm_rounded_times_2 = cm_numeric | times: 2 | round: 0
                      assign cm_rounded = cm_rounded_times_2 | divided_by: 2.0
                      assign cm_parts = cm_rounded | split: '.'
                      assign cm_whole = cm_parts[0]
                      assign cm_decimal = cm_parts[1] | default: '0'
                      
                      if cm_decimal == '5'
                        assign cm_value = cm_whole | append: '½'
                      else
                        assign cm_value = cm_whole
                      endif
                    else
                      assign fraction_value = value
                      assign numeric_value = value | plus: 0
                      assign cm_numeric = numeric_value | times: 2.54
                      assign cm_rounded_times_2 = cm_numeric | times: 2 | round: 0
                      assign cm_rounded = cm_rounded_times_2 | divided_by: 2.0
                      assign cm_parts = cm_rounded | split: '.'
                      assign cm_whole = cm_parts[0]
                      assign cm_decimal = cm_parts[1] | default: '0'
                      
                      if cm_decimal == '5'
                        assign cm_value = cm_whole | append: '½'
                      else
                        assign cm_value = cm_whole
                      endif
                    endif
                  endif
                -%}
                <td data-value-inches="{{ value }}" data-value-cm="{{ cm_value }}">{{ fraction_value }}</td>
              {%- endfor -%}
            </tr>
          {%- endfor -%}
        </tbody>
      </table>
    </div>
  </size-chart-component>
{%- endif -%}

{% stylesheet %}
  .size-chart {
    --size-chart-border-color: rgb(var(--color-foreground-rgb) / 0.2);
    --size-chart-border-width: 1px;
    --size-chart-border-style: solid;
    --size-chart-border-radius: var(--style-border-radius-inputs);
    --size-chart-cell-padding: var(--padding-sm);
    --size-chart-header-background: rgb(var(--color-background-rgb));
    --size-chart-row-background: rgb(var(--color-background-rgb));
    --size-chart-row-hover-background: rgb(var(--color-foreground-rgb) / 0.05);
    
    width: 100%;
  }

  .size-chart__title {
    margin: 0 0 var(--margin-md) 0;
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-medium);
  }

  .size-chart__tabs {
    display: flex;
    gap: 1px;
    margin-bottom: 20px;
    margin-left: auto;
    width: fit-content;
    border: var(--size-chart-border-width) var(--size-chart-border-style) var(--color-foreground);
    border-radius: var(--size-chart-border-radius);
    background-color: var(--size-chart-border-color);
    overflow: hidden;
  }

  .size-chart__tab {
    padding: 4px 8px;
    background-color: var(--size-chart-row-background);
    border: none;
    font-size: var(--font-size-xs);
    font-weight: var(--font-weight-medium);
    color: rgb(var(--color-foreground-rgb) / 0.7);
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: center;
  }

  .size-chart__tab:not(.size-chart__tab--active):hover {
    background-color: rgb(var(--color-foreground-rgb) / 0.02);
    color: rgb(var(--color-foreground-rgb));
  }

  .size-chart__tab--active {
    background-color: rgb(var(--color-foreground-rgb));
    color: rgb(var(--color-background-rgb));
  }

  .size-chart__tab:focus-visible {
    outline: 2px solid rgb(var(--color-foreground-rgb));
    outline-offset: -2px;
  }

  .size-chart__table-wrapper {
    overflow-x: auto;
    border: var(--size-chart-border-width) var(--size-chart-border-style) var(--size-chart-border-color);
    border-radius: var(--size-chart-border-radius);
    background-color: var(--size-chart-row-background);
  }

  .size-chart__table {
    width: 100%;
    border-collapse: collapse;
    min-width: 398px;
  }

  .size-chart__table th,
  .size-chart__table td {
    padding: var(--size-chart-cell-padding);
    text-align: center;
    border-bottom: var(--size-chart-border-width) var(--size-chart-border-style) var(--size-chart-border-color);
    border-right: var(--size-chart-border-width) var(--size-chart-border-style) var(--size-chart-border-color);
  }

  .size-chart__table th {
    background-color: var(--size-chart-header-background);
    font-weight: var(--font-weight-medium);
    position: sticky;
    top: 0;
    z-index: 1;
  }

  .size-chart__table th:last-child,
  .size-chart__table td:last-child {
    border-right: none;
  }

  .size-chart__table tbody tr:last-child th,
  .size-chart__table tbody tr:last-child td {
    border-bottom: none;
  }

  .size-chart__table tbody tr:hover {
    background-color: var(--size-chart-row-hover-background);
  }

  .size-chart__table th[scope="row"] {
    text-align: left;
    font-weight: var(--font-weight-medium);
    background-color: var(--size-chart-header-background);
  }

  @media screen and (max-width: 749px) {
    .size-chart__table {
      min-width: 300px;
      font-size: var(--font-size-sm);
    }
    
    .size-chart__table th,
    .size-chart__table td {
      padding: var(--padding-xs);
    }

    .size-chart__tab {
      width: 40px;
      padding: var(--padding-xs);
      font-size: var(--font-size-xs);
    }
  }
{% endstylesheet %}

{% schema %}
{
  "name": "Size Chart",
  "tag": "div",
  "class": "size-chart-wrapper",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Size Chart"
    },
    {
      "type": "header",
      "content": "Padding"
    },
    {
      "type": "range",
      "id": "padding-block-start",
      "label": "Top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding-block-end",
      "label": "Bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding-inline-start",
      "label": "Left",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding-inline-end",
      "label": "Right",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    }
  ],
  "presets": [
    {
      "name": "Size Chart",
      "category": "Product"
    }
  ]
}
{% endschema %}
