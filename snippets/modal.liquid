{%- liquid
  assign modal_id = 'modal-' | append: block.id
  assign button_class = settings.button_style
-%}

<button
  type="button"
  class="modal-trigger {{ button_class }}"
  data-modal-trigger="{{ modal_id }}"
  aria-haspopup="dialog"
  aria-expanded="false"
>
  {{ settings.button_text }}
</button>

<div
  id="{{ modal_id }}"
  class="
    modal
    modal--{{ settings.modal_size }}
    border-style
    spacing-style
    size-style
    {% if settings.inherit_color_scheme == false %} color-{{ settings.color_scheme }}{% endif %}
  "
  style="
    {% render 'border-override', settings: settings %}
    {% render 'spacing-style', settings: settings %}
    {% render 'size-style', settings: settings %}
  "
  role="dialog"
  aria-modal="true"
  aria-labelledby="{{ modal_id }}-title"
  aria-describedby="{{ modal_id }}-content"
  aria-hidden="true"
  hidden
>
  <div class="modal__overlay"></div>
  <div class="modal__container">
    <div class="modal__header">
      <h2 class="modal__title" id="{{ modal_id }}-title">{{ settings.title }}</h2>
      <button
        type="button"
        class="modal__close"
        data-modal-close="{{ modal_id }}"
        aria-label="Close modal"
      >
        {% render 'icon', icon: 'close' %}
      </button>
    </div>
    
    <div class="modal__media-wrapper">
      {% render 'background-media',
        background_media: settings.background_media,
        background_video: settings.video,
        background_video_position: settings.video_position,
        background_image: settings.background_image,
        background_image_position: settings.background_image_position
      %}
      {% if settings.toggle_overlay %}
        {% render 'overlay', settings: settings, layer: '0' %}
      {% endif %}
    </div>

    <div
      class="
        modal__content
        layout-panel-flex
        layout-panel-flex--{{ settings.content_direction | default: 'column' }}
        {% if settings.vertical_on_mobile %} mobile-column{% endif %}
      "
      style="{% render 'layout-panel-style', settings: settings %}"
      id="{{ modal_id }}-content"
    >
      {{- children -}}
    </div>
  </div>
</div>

{% stylesheet %}
  .modal-trigger {
    display: inline-block;
  }

  .modal-trigger .button-unstyled {
    cursor: pointer;
  }

  .product-information .modal-trigger {
    position: absolute;
    top: 0;
    right: 0;
  }

  .modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--padding-md);
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  .modal[aria-hidden="false"] {
    opacity: 1;
    visibility: visible;
  }

  .modal__overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgb(var(--color-foreground-rgb) / 0.5);
    backdrop-filter: blur(4px);
  }

  .modal__container {
    position: relative;
    background-color: rgb(var(--color-background-rgb));
    border-radius: var(--style-border-radius-inputs);
    box-shadow: 0 20px 40px rgb(var(--color-foreground-rgb) / 0.1);
    max-width: 90vw;
    max-height: 90vh;
    overflow: hidden;
    transform: scale(0.9);
    transition: transform 0.3s ease;
  }

  .modal[aria-hidden="false"] .modal__container {
    transform: scale(1);
  }

  .modal--small .modal__container {
    width: 400px;
  }

  .modal--medium .modal__container {
    width: 600px;
  }

  .modal--large .modal__container {
    width: 800px;
  }

  .modal--full .modal__container {
    width: 95vw;
    height: 95vh;
  }

  .modal__header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: var(--padding-lg);
    border-bottom: 1px solid rgb(var(--color-foreground-rgb) / 0.1);
  }

  .modal__title {
    margin: 0;
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-medium);
  }

  .modal__close {
    background: none;
    border: none;
    padding: var(--padding-xs);
    cursor: pointer;
    color: rgb(var(--color-foreground-rgb) / 0.7);
    border-radius: var(--style-border-radius-inputs);
    transition: all 0.2s ease;
  }

  .modal__close:hover {
    background-color: rgb(var(--color-foreground-rgb) / 0.05);
    color: rgb(var(--color-foreground-rgb));
  }

  .modal__close:focus-visible {
    outline: 2px solid rgb(var(--color-foreground-rgb));
    outline-offset: 2px;
  }

  .modal__content {
    padding: var(--padding-lg);
    overflow-y: auto;
    max-height: calc(90vh - 120px);
  }

  @media screen and (max-width: 749px) {
    .modal {
      padding: var(--padding-sm);
    }

    .modal--small .modal__container,
    .modal--medium .modal__container,
    .modal--large .modal__container {
      width: 100%;
    }

    .modal__header {
      padding: var(--padding-md);
    }

    .modal__content {
      padding: var(--padding-md);
      max-height: calc(90vh - 100px);
    }
  }
{% endstylesheet %}

{% javascript %}
  class Modal {
    constructor() {
      this.modals = new Map();
      this.activeModal = null;
      this.init();
    }

    init() {
      this.bindEvents();
    }

    bindEvents() {
      document.addEventListener('click', (e) => {
        if (e.target.matches('[data-modal-trigger]')) {
          e.preventDefault();
          const modalId = e.target.getAttribute('data-modal-trigger');
          this.openModal(modalId);
        }

        if (e.target.matches('[data-modal-close]')) {
          e.preventDefault();
          const modalId = e.target.getAttribute('data-modal-close');
          this.closeModal(modalId);
        }
      });

      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.activeModal) {
          this.closeModal(this.activeModal);
        }
      });
    }

    openModal(modalId) {
      const modal = document.getElementById(modalId);
      if (!modal) return;

      this.activeModal = modalId;
      modal.hidden = false;
      modal.setAttribute('aria-hidden', 'false');
      
      document.body.style.overflow = 'hidden';
      
      this.modals.set(modalId, modal);
      
      setTimeout(() => {
        modal.focus();
      }, 100);
    }

    closeModal(modalId) {
      const modal = document.getElementById(modalId);
      if (!modal) return;

      modal.setAttribute('aria-hidden', 'true');
      
      setTimeout(() => {
        modal.hidden = true;
      }, 300);

      if (this.activeModal === modalId) {
        this.activeModal = null;
      }

      document.body.style.overflow = '';
      
      this.modals.delete(modalId);
    }
  }

  if (typeof window !== 'undefined') {
    window.modal = new Modal();
  }
{% endjavascript %}
